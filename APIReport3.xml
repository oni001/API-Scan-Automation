<?xml version="1.0" encoding="UTF-8"?>
<report>
<scan_information>
	<title>Wonderful_SAINT_API_Report</title>
	<report_time>Tue Sep 17 15:41:20 2019</report_time>
	<scan_time>Thu Sep  5 17:09:53 2019</scan_time>
	<scan_level>custom</scan_level>
	<scanner_version>9.6.26</scanner_version>
</scan_information>
<summary>
	<vulnerabilities_by_severity bar="bar_vulns.png" pie="pie_vulns.png">
		<reds>0</reds>
		<yellows>0</yellows>
		<browns>257</browns>
		<greens>52</greens>
	</vulnerabilities_by_severity>
	<hosts_by_severity bar="bar_hosts.png" pie="pie_hosts.png">
		<red_hosts>0</red_hosts>
		<yellow_hosts>0</yellow_hosts>
		<brown_hosts>18</brown_hosts>
		<green_hosts>0</green_hosts>
		<black_hosts>1</black_hosts>
	</hosts_by_severity>
	<vulnerabilities_by_class bar="bar_classes.png" pie="pie_classes.png">
		<web>0</web>
		<mail>0</mail>
		<file_transfer>0</file_transfer>
		<login_shell>36</login_shell>
		<print_services>0</print_services>
		<rpc>0</rpc>
		<dns>0</dns>
		<databases>0</databases>
		<networking_snmp>0</networking_snmp>
		<windows_os>0</windows_os>
		<passwords>0</passwords>
		<other>221</other>
	</vulnerabilities_by_class>
	<vulnerabilities_by_subnet>
		<subnet>
			<subnet_addr>10.10.4</subnet_addr>
			<hosts_detected>5</hosts_detected>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>71</browns>
			<greens>13</greens>
		</subnet>
		<subnet>
			<subnet_addr>10.10.3</subnet_addr>
			<hosts_detected>6</hosts_detected>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>73</browns>
			<greens>14</greens>
		</subnet>
		<subnet>
			<subnet_addr>10.10.2</subnet_addr>
			<hosts_detected>3</hosts_detected>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>42</browns>
			<greens>6</greens>
		</subnet>
		<subnet>
			<subnet_addr>10.10.1</subnet_addr>
			<hosts_detected>5</hosts_detected>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>71</browns>
			<greens>19</greens>
		</subnet>
	</vulnerabilities_by_subnet>
	<hosts_by_subnet>
		<subnet>
			<subnet_name>10.10.4</subnet_name>
			<hosts_detected>5</hosts_detected>
			<red_hosts>0</red_hosts>
			<yellow_hosts>0</yellow_hosts>
			<brown_hosts>5</brown_hosts>
			<green_hosts>0</green_hosts>
			<black_hosts>0</black_hosts>
		</subnet>
		<subnet>
			<subnet_name>10.10.3</subnet_name>
			<hosts_detected>6</hosts_detected>
			<red_hosts>0</red_hosts>
			<yellow_hosts>0</yellow_hosts>
			<brown_hosts>5</brown_hosts>
			<green_hosts>0</green_hosts>
			<black_hosts>1</black_hosts>
		</subnet>
		<subnet>
			<subnet_name>10.10.2</subnet_name>
			<hosts_detected>3</hosts_detected>
			<red_hosts>0</red_hosts>
			<yellow_hosts>0</yellow_hosts>
			<brown_hosts>3</brown_hosts>
			<green_hosts>0</green_hosts>
			<black_hosts>0</black_hosts>
		</subnet>
		<subnet>
			<subnet_name>10.10.1</subnet_name>
			<hosts_detected>5</hosts_detected>
			<red_hosts>0</red_hosts>
			<yellow_hosts>0</yellow_hosts>
			<brown_hosts>5</brown_hosts>
			<green_hosts>0</green_hosts>
			<black_hosts>0</black_hosts>
		</subnet>
	</hosts_by_subnet>
	<vulnerabilities_per_class_by_subnet bar="bar_subclasses.png">
		<subnet>
			<subnet_addr>10.10.4</subnet_addr>
			<web>0</web>
			<mail>0</mail>
			<file_transfer>0</file_transfer>
			<login_shell>10</login_shell>
			<print_services>0</print_services>
			<rpc>0</rpc>
			<dns>0</dns>
			<databases>0</databases>
			<networking_snmp>0</networking_snmp>
			<windows_os>0</windows_os>
			<passwords>0</passwords>
			<other>61</other>
		</subnet>
		<subnet>
			<subnet_addr>10.10.3</subnet_addr>
			<web>0</web>
			<mail>0</mail>
			<file_transfer>0</file_transfer>
			<login_shell>10</login_shell>
			<print_services>0</print_services>
			<rpc>0</rpc>
			<dns>0</dns>
			<databases>0</databases>
			<networking_snmp>0</networking_snmp>
			<windows_os>0</windows_os>
			<passwords>0</passwords>
			<other>63</other>
		</subnet>
		<subnet>
			<subnet_addr>10.10.2</subnet_addr>
			<web>0</web>
			<mail>0</mail>
			<file_transfer>0</file_transfer>
			<login_shell>6</login_shell>
			<print_services>0</print_services>
			<rpc>0</rpc>
			<dns>0</dns>
			<databases>0</databases>
			<networking_snmp>0</networking_snmp>
			<windows_os>0</windows_os>
			<passwords>0</passwords>
			<other>36</other>
		</subnet>
		<subnet>
			<subnet_addr>10.10.1</subnet_addr>
			<web>0</web>
			<mail>0</mail>
			<file_transfer>0</file_transfer>
			<login_shell>10</login_shell>
			<print_services>0</print_services>
			<rpc>0</rpc>
			<dns>0</dns>
			<databases>0</databases>
			<networking_snmp>0</networking_snmp>
			<windows_os>0</windows_os>
			<passwords>0</passwords>
			<other>61</other>
		</subnet>
	</vulnerabilities_per_class_by_subnet>
	<top_hosts>
		<top_host>
			<rank>1</rank>
			<hostname>10.10.1.117</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>15</total_vulns>
		</top_host>
		<top_host>
			<rank>2</rank>
			<hostname>10.10.3.118</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>15</total_vulns>
		</top_host>
		<top_host>
			<rank>3</rank>
			<hostname>10.10.3.144</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>15</total_vulns>
		</top_host>
		<top_host>
			<rank>4</rank>
			<hostname>10.10.3.38</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>15</total_vulns>
		</top_host>
		<top_host>
			<rank>5</rank>
			<hostname>10.10.4.42</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>15</total_vulns>
		</top_host>
		<top_host>
			<rank>6</rank>
			<hostname>10.10.1.92</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>14</total_vulns>
		</top_host>
		<top_host>
			<rank>7</rank>
			<hostname>10.10.4.78</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>14</total_vulns>
		</top_host>
		<top_host>
			<rank>8</rank>
			<hostname>10.10.1.151</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>14</total_vulns>
		</top_host>
		<top_host>
			<rank>9</rank>
			<hostname>10.10.1.53</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>14</total_vulns>
		</top_host>
		<top_host>
			<rank>10</rank>
			<hostname>10.10.1.47</hostname>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<total_vulns>14</total_vulns>
		</top_host>
	</top_hosts>
	<top_vulns bar="bar_topvulns.png">
		<top_vuln>
			<rank>1</rank>
			<vulnerability>minimum password length policy is weak (6)</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>2</rank>
			<vulnerability>account for user root has never been used</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>3</rank>
			<vulnerability>ICMP timestamp requests enabled</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>4</rank>
			<vulnerability>Is your LDAP secure?</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>5</rank>
			<vulnerability>SSH supports CBC ciphers</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>6</rank>
			<vulnerability>SSH supports weak MAC algorithms</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>7</rank>
			<vulnerability>Sudo vulnerable version: 1.8.19</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>8</rank>
			<vulnerability>ICMP redirects are allowed</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>9</rank>
			<vulnerability>account for user jboss has never been used</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
		<top_vuln>
			<rank>10</rank>
			<vulnerability>default minimum password age policy is weak (0 days)</vulnerability>
			<no_of_targets>18</no_of_targets>
		</top_vuln>
	</top_vulns>
</summary>
<overview>
	<hosts>
		<host>
			<hostname>10.10.1.47</hostname>
			<ipaddr>10.10.1.47</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.1.53</hostname>
			<ipaddr>10.10.1.53</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.1.92</hostname>
			<ipaddr>10.10.1.92</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.1.117</hostname>
			<ipaddr>10.10.1.117</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>15</browns>
		</host>
		<host>
			<hostname>10.10.1.151</hostname>
			<ipaddr>10.10.1.151</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.2.25</hostname>
			<ipaddr>10.10.2.25</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.2.221</hostname>
			<ipaddr>10.10.2.221</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.2.237</hostname>
			<ipaddr>10.10.2.237</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.3.38</hostname>
			<ipaddr>10.10.3.38</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>15</browns>
		</host>
		<host>
			<hostname>10.10.3.73</hostname>
			<ipaddr>10.10.3.73</ipaddr>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>0</browns>
		</host>
		<host>
			<hostname>10.10.3.118</hostname>
			<ipaddr>10.10.3.118</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>15</browns>
		</host>
		<host>
			<hostname>10.10.3.144</hostname>
			<ipaddr>10.10.3.144</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>15</browns>
		</host>
		<host>
			<hostname>10.10.3.171</hostname>
			<ipaddr>10.10.3.171</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.3.217</hostname>
			<ipaddr>10.10.3.217</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.4.42</hostname>
			<ipaddr>10.10.4.42</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>15</browns>
		</host>
		<host>
			<hostname>10.10.4.59</hostname>
			<ipaddr>10.10.4.59</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.4.78</hostname>
			<ipaddr>10.10.4.78</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.4.85</hostname>
			<ipaddr>10.10.4.85</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
		<host>
			<hostname>10.10.4.189</hostname>
			<ipaddr>10.10.4.189</ipaddr>
			<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
			<reds>0</reds>
			<yellows>0</yellows>
			<browns>14</browns>
		</host>
	</hosts>
	<vulnerabilities>
		<host_info>
			<hostname>10.10.1.47</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.1.53</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.1.92</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.1.117</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>80/tcp</port>
				<severity>potential</severity>
				<description>scan may have been dynamically blocked by an IPS</description>
				<class>Other</class>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.1.151</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.2.25</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ssm-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.2.221</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.2.237</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.3.38</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ssm-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.3.73</hostname>
		</host_info>
		<host_info>
			<hostname>10.10.3.118</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>80/tcp</port>
				<severity>potential</severity>
				<description>scan may have been dynamically blocked by an IPS</description>
				<class>Other</class>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.3.144</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>80/tcp</port>
				<severity>potential</severity>
				<description>scan may have been dynamically blocked by an IPS</description>
				<class>Other</class>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.3.171</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.3.217</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.4.42</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ssm-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.4.59</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.4.78</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.4.85</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
		<host_info>
			<hostname>10.10.4.189</hostname>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account lockout policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default maximum password age policy is weak (99999 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>default minimum password age policy is weak (0 days)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>minimum password length policy is weak (6)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>password history policy is weak (0)</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP timestamp requests enabled</description>
				<class>Other</class>
				<cve>CVE-1999-0524</cve>
				<cvss_base_score>0.0</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port> </port>
				<severity>potential</severity>
				<description>ICMP redirects are allowed</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>389/tcp</port>
				<severity>potential</severity>
				<description>Is your LDAP secure?</description>
				<class>Other</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports CBC ciphers</description>
				<class>Login/Shell</class>
				<cve>CVE-2008-5161</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>SSH supports weak MAC algorithms</description>
				<class>Login/Shell</class>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>Sudo vulnerable version: 1.8.19</description>
				<class>Other</class>
				<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
				<cvss_base_score>2.6</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user ec2-user has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user jboss has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
			<vulnerability>
				<port>22/tcp</port>
				<severity>potential</severity>
				<description>account for user root has never been used</description>
				<class>Other</class>
				<cvss_base_score>0.9</cvss_base_score>
			</vulnerability>
		</host_info>
	</vulnerabilities>
</overview>
<details>
	<host_info>
		<hostname>10.10.1.47</hostname>
		<ipaddr>10.10.1.47</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03a3e09a			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.1.53</hostname>
		<ipaddr>10.10.1.53</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ad22ad			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.1.92</hostname>
		<ipaddr>10.10.1.92</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ad45e6			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.1.117</hostname>
		<ipaddr>10.10.1.117</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03a4099c			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>scan may have been dynamically blocked by an IPS</description>
			<severity>Potential Problem</severity>
			<impact>
				The scan results may be inconclusive.
			</impact>
			<resolution>
				Temporarily disable the Intrusion Prevention System
				or configure an exception for the scanner&apos;s IP address
				before starting the scan.
			</resolution>
			<reference>
				See pages 14-15 of the [https://www.pcisecuritystandards.org/documents/ASV_Program_Guide_v2.pdf] PCI DSS ASV Program Guide
				for more information on handling interference from an IPS during compliance scanning.
			</reference>
			<vuln_details>
				Service: 80:TCP
				port(s) became closed during scan: 80			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.1.151</hostname>
		<ipaddr>10.10.1.151</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ae3494			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.2.25</hostname>
		<ipaddr>10.10.2.25</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ae57cc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ssm-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ssm-user has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.2.221</hostname>
		<ipaddr>10.10.2.221</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ac95c6			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.2.237</hostname>
		<ipaddr>10.10.2.237</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ae7b04			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.3.38</hostname>
		<ipaddr>10.10.3.38</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ae115a			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ssm-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ssm-user has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.3.73</hostname>
		<ipaddr>10.10.3.73</ipaddr>
		<scan_time>Sep 05 17:08:25 2019</scan_time>
	</host_info>
	<host_info>
		<hostname>10.10.3.118</hostname>
		<ipaddr>10.10.3.118</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03adcae9			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>scan may have been dynamically blocked by an IPS</description>
			<severity>Potential Problem</severity>
			<impact>
				The scan results may be inconclusive.
			</impact>
			<resolution>
				Temporarily disable the Intrusion Prevention System
				or configure an exception for the scanner&apos;s IP address
				before starting the scan.
			</resolution>
			<reference>
				See pages 14-15 of the [https://www.pcisecuritystandards.org/documents/ASV_Program_Guide_v2.pdf] PCI DSS ASV Program Guide
				for more information on handling interference from an IPS during compliance scanning.
			</reference>
			<vuln_details>
				Service: 80:TCP
				port(s) became closed during scan: 80			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.3.144</hostname>
		<ipaddr>10.10.3.144</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ac728c			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>scan may have been dynamically blocked by an IPS</description>
			<severity>Potential Problem</severity>
			<impact>
				The scan results may be inconclusive.
			</impact>
			<resolution>
				Temporarily disable the Intrusion Prevention System
				or configure an exception for the scanner&apos;s IP address
				before starting the scan.
			</resolution>
			<reference>
				See pages 14-15 of the [https://www.pcisecuritystandards.org/documents/ASV_Program_Guide_v2.pdf] PCI DSS ASV Program Guide
				for more information on handling interference from an IPS during compliance scanning.
			</reference>
			<vuln_details>
				Service: 80:TCP
				port(s) became closed during scan: 80			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.3.171</hostname>
		<ipaddr>10.10.3.171</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03ad691e			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.3.217</hostname>
		<ipaddr>10.10.3.217</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03adee21			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.4.42</hostname>
		<ipaddr>10.10.4.42</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03acff73			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ssm-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ssm-user has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.4.59</hostname>
		<ipaddr>10.10.4.59</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03a3b178			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.4.78</hostname>
		<ipaddr>10.10.4.78</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03acb8ff			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.4.85</hostname>
		<ipaddr>10.10.4.85</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:51 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03a35e8f			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
	<host_info>
		<hostname>10.10.4.189</hostname>
		<ipaddr>10.10.4.189</ipaddr>
		<hosttype>Linux 4.14.138-114.102.amzn2.x86_64</hosttype>
		<scan_time>Sep 05 17:09:53 2019</scan_time>
		<vulnerability>
			<description>account lockout policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				0 &amp;gt; 3 or 0 = 0			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default maximum password age policy is weak (99999 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MAX_DAYS=99999 &amp;gt; 42			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>default minimum password age policy is weak (0 days)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				login.defs PASS_MIN_DAYS=0 &amp;lt; 2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>minimum password length policy is weak (6)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with effective minimum length 6 &amp;lt; 8			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>password history policy is weak (0)</description>
			<severity>Potential Problem</severity>
			<impact>
				Weak password policies could make it easier for an attacker to gain
				unauthorized access to user accounts.
			</impact>
			<resolution>
				Edit the account policy, which requires different methods on different
				varieties of Unix-derived systems. Most current UNIX-style systems use the
				shadow file method to store encrypted passwords and some user settings (in the
				/etc/shadow file). Most of these systems also use Pluggable
				Authentication Module (PAM) modules to control minimum password length,
				password history, password complexity requirements, and account lockout. Linux
				systems have a file /etc/login.defs that contains various
				default settings, e.g., for minimum and maximum password age, which are
				inserted into the /etc/password file when a new user is
				created.
				Change the account policy settings to the recommended values.
				In a typical organization, these are:
				Minimum password length: 8 characters
				Enforce password history: 24 passwords remembered
				Maximum password age: 42 days
				Minimum password age: 2 days
				Account lockout threshold: 3 invalid logon attempts
				PCI requires that passwords contain letters and digits, but a stronger policy
				is to require three or four different types of characters, e.g., upper case
				letters, lower case letters, numbers, and symbols.
				Note that the minimum and maximum password age settings are really defaults
				that can generally be overridden for individual users.
				Also note that the scanner currently performs these checks only for Mac OS X
				starting with 10.5 Leopard, and Linux systems using standard Linux security
				and PAM modules.
			</resolution>
			<reference>
				See Hitachi ID Systems&apos; white paper
				[http://hitachi-id.com/password-manager/docs/password-policy-guidelines.html] Password Policy Guidelines
				and documentation for your particular operating system.
			</reference>
			<vuln_details>
				Service: ssh
				pam_unix.so with remember=0 &amp;lt; 24			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP timestamp requests enabled</description>
			<severity>Potential Problem</severity>
			<cve>CVE-1999-0524</cve>
			<impact>
				A remote attacker could obtain sensitive information
				about the network.
			</impact>
			<resolution>
				Configure the system or firewall not to allow ICMP timestamp
				requests (message type 13) or ICMP netmask requests
				(message type 17).
				Instructions for doing this on specific platforms are as follows:
				Windows:
				Block these message types using the Windows firewall as described in
				[http://technet2.microsoft.com/WindowsServer/en/library/3181ab4c-d851-495e-99a6-332bb7fb26ec1033.mspx?mfr=true] Microsoft TechNet.
				Linux:
				Use ipchains or iptables to filter ICMP netmask requests using the command:
				ipchains -A input -p icmp --icmp-type address-mask-request -j DROP
				Use ipchains or iptables to filter ICMP timestamp requests using the commands:
				ipchains -A input -p icmp --icmp-type timestamp-request -j DROP
				ipchains -A output -p icmp --icmp-type timestamp-reply -j DROP
				To ensure that this change persists after the system
				reboots, put the above command into the system&apos;s boot-up script (typically /etc/rc.local).
				Cisco:
				Block ICMP message types 13 and 17 as follows:
				deny icmp any any 13
				deny icmp any any 17
			</resolution>
			<reference>
				For more information about ICMP, see
				[http://www.rfc.net/rfc792.html] RFC792.
			</reference>
			<vuln_details>
				Service: icmp
				timestamp=03acdc39			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>ICMP redirects are allowed</description>
			<severity>Potential Problem</severity>
			<impact>
				An attacker could change the routing of packets from the target such that transmitted data could potentially be monitored or modified.
			</impact>
			<resolution>
				Disable ICMP redirects. On Windows, this is done by setting the following registry value:
				Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
				Name: EnableICMPRedirect
				Type: REG_DWORD
				Data: 0
				To disable ICMP redirects on Linux, use the following commands:
				sysctl -w net.ipv4.conf.all.accept_redirects=0
				sysctl -w net.ipv4.conf.all.secure_redirects=0
				To make the above settings permanent, also set the following lines in the /etc/sysctl.conf file:
				net.ipv4.conf.all.accept_redirects = 0
				net.ipv4.conf.all.secure_redirects = 0
			</resolution>
			<reference>
				For more information about ICMP redirects, see [http://askubuntu.com/questions/118273/what-are-icmp-redirects-and-should-they-be-blocked] Ask Ubuntu and
				[http://www.windowsreference.com/security/disable-icmp-redirects-in-vistaxp20032000/] Windows Reference.
				For more information on securing the Linux kernel, see [http://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/] Linux Kernel /etc/sysctl.conf Security Hardening.
			</reference>
			<vuln_details>
				Service: icmp
				/proc/sys/net/ipv4/conf/all/secure_redirects = 1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Is your LDAP secure?</description>
			<severity>Potential Problem</severity>
			<impact>
				If an application uses a vulnerable implementation of LDAP,
				an attacker could cause a denial of service or execute
				arbitrary commands.
			</impact>
			<resolution>
				See [http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory 2001-18
				for information on obtaining a patch for your application.
				OpenLDAP 2.x users may also need to fix a separate set of
				vulnerabilities which were reported in
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047. Consult your vendor for a fix.
				If a patch is not available, then ports 389 and 636, TCP and UDP,
				should be blocked at the network perimeter until a patch can
				be applied.
			</resolution>
			<reference>
				For more information, see
				[http://www.cert.org/advisories/CA-2001-18.html] CERT Advisory
				2001-18 and 
				[http://www.suse.com/de/security/2002_047_openldap2.html] SuSE Security
				Announcement 2002:047.
			</reference>
			<vuln_details>
				Service: ldap
			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports CBC ciphers</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2008-5161</cve>
			<impact>
				A remote attacker with the ability to sniff network
				traffic could decrypt certain parts of an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support ciphers that use CBC mode.
				To disable CBC-mode ciphers on OpenSSH servers, edit the sshd_config file and add a Ciphers line (or modify this line if it already exists) as follows:
				Ciphers aes128-ctr,aes192-ctr,aes256-ctr
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on the vulnerability in SSH when used with CBC mode, see
				[https://www.kb.cert.org/vuls/id/958563] CERT Vulnerability Note 958563.
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 encryption_algorithms_client_to_server = chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>SSH supports weak MAC algorithms</description>
			<severity>Potential Problem</severity>
			<impact>
				A remote attacker with the ability to modify network
				traffic could alter the data in an encrypted session.
			</impact>
			<resolution>
				Configure the SSH server not to support the MD5 and SHA1 algorithms.
				To do this on OpenSSH servers, edit the sshd_config file and add a Macs line (or modify this line if it already exists) as follows:
				Macs hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com
				Then restart the SSH service.
				For other types of SSH servers, consult the server documentation.
			</resolution>
			<reference>
				For more information on configuring SSH, see
				[https://linux-audit.com/audit-and-harden-your-ssh-configuration/] OpenSSH Security and Hardening.
			</reference>
			<vuln_details>
				Service: ssh
				SSH2 mac_algorithms_client_to_server = umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>Sudo vulnerable version: 1.8.19</description>
			<severity>Potential Problem</severity>
			<cve>CVE-2017-1000367 CVE-2017-1000368</cve>
			<impact>
				Vulnerabilities in Sudo allow local user to execute commands to escalate their privileges to root.
			</impact>
			<resolution>
				[https://www.sudo.ws/download.html] Upgrade to Sudo 1.8.20p2 or higher.
			</resolution>
			<reference>
				Sudo&apos;s get_process_ttyname() function vulnerabilities were posted to 
				[https://www.sudo.ws/alerts/linux_tty.html] CVE-2017-1000367 and
				[http://www.openwall.com/lists/oss-security/2017/05/30/16] oss-security CVE-2017-1000367.
			</reference>
			<vuln_details>
				Service: ssh
				Sent:
sudo -V
Received:
Sudo version 1.8.19p2			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user ec2-user has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user ec2-user has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user jboss has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user jboss has never logged in			</vuln_details>
		</vulnerability>
		<vulnerability>
			<description>account for user root has never been used</description>
			<severity>Potential Problem</severity>
			<impact>
				Unused accounts present a needless attack vector for
				potential intruders.
			</impact>
			<resolution>
				Remove unused accounts from the system.
			</resolution>
			<vuln_details>
				Service: ssh
				lastlog reports user root has never logged in			</vuln_details>
		</vulnerability>
	</host_info>
</details>
</report>
